## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x<-makeVector(c(1,2,3))
x$get()
cachemean(x)
cachemean(x)
x$set(c(4,5,6))
x$get()
cachemean(x)
cachemean(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
mtx<-matrix(1:4,nrow=2,ncol=2)
mtx
x<-makeCacheMatrix(mtx)
x$get()
cacheSolve(x)
cacheSolve(x)
class(x)
x
makeCacheMatrix(matrix(c(1,1,2,-2),nrow=2,ncol=2))
x<-makeCacheMatrix(matrix(c(1,1,2,-2),nrow=2,ncol=2))
x
mtx<-matrix(c(1,1,2,-2),nrow=2,ncol=2)
mtx
mtx<-matrix(c(1,1,-2,2),nrow=2,ncol=2)
mtx
makeCacheMatrix(mtx)
x$get()
cacheSolve(x)
cacheSolve(x)
##These functions together store a matrix (assumed invertible) and its inverse,
##computing the inverse only if it isn't previously cached, else it returns the cached
##inverse.
## makeCacheMatrix takes as input a square matrix (assumed nonsingular, i.e. invertible)
## and returns a list containing three functions
makeCacheMatrix <- function(x = matrix()) {
m <- NULL                              #Creates a 'space' to hold the matrix inverse and erases any cached inverses
set <- function(y) {
x <<- y                              #Saves a matrix
m <<- NULL                           #Erases any cached inverses
}
get <- function() x                    #returns stored matrix
setinv <- function(solve) m <<- solve  #Stores new inverse
getinv <- function() m                 #Returns stored inverse
list(set = set, get = get,             #output for use in cacheSolve
setinv = setinv,
getinv = getinv)
}
## cacheSolve has as input the output of makeCacheMatrix, allowing it to return the matrix inverse by
## computation if not previously computed, otherwise it computes the inverse.
cacheSolve <- function(x, ...) {
m <- x$getinv()                        #Obtains variable that could hold inverse from output of makeCachematrix
if(!is.null(m)) {                      #If the inverse is in the output of makeCacheMatrix, this returns its
#value and prints a message indicating the inverse was previously cached
message("getting cached data")
return(m)
}
data <- x$get()                        #If inverse isn't cached, this obtains the matrix.
m <- solve(data, ...)                  #This computes the matrix inverse.
x$setinv(m)                            #This caches the inverse when not previously cached.
m                                      #This outputs the inverse.
}
mtx<-matrix(c(2,1,-1,0))
mtx
mtx<-matrix(c(2,1,-1,0),nrow=2,ncol=2)
mtx
makeCacheMatrix(mtx)
x<-makeCacheMatrix(mtx)
x$get
x$get()
cacheSolve(x)
